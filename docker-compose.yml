version: '3'

services:

  # Service LDAP

  ldap-server:
    image: osixia/openldap
    container_name: ldap_server_container
    environment:
      LDAP_ORGANISATION: "CATS"
      LDAP_DOMAIN: "$DOMAINENIV2.$DOMAINENIV1"
      LDAP_ADMIN_PASSWORD: "$LDAP_ADMIN_PASSWORD"
      LDAP_READONLY_USER: true
      LDAP_READONLY_USER_USERNAME: "sysUser"
      LDAP_READONLY_USER_PASSWORD: "readOnlyPassword"
    ports:
      - "389:389"
    volumes:
      - ./data/ldap_data:/var/lib/ldap
      - ./data/ldap_config:/etc/ldap/slapd.d

  # Service phpldapadmin

  phpldapadmin:
    image: osixia/phpldapadmin
    container_name: ldap_phpldapadmin_container
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: ldap-server
      PHPLDAPADMIN_HTTPS: 0
    ports:
      - "6080:80"
    depends_on:
      - ldap-server

  # Service Web-Portal

  web-portal:
    build:
      context: .
      dockerfile_inline: |
        FROM php:apache
        COPY ./Certificats/localhost.crt /etc/ssl/certs/localhost.crt
        COPY ./Certificats/localhost.key /etc/ssl/private/localhost.key
        
        COPY ./Config-SSL/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf
        COPY ./Config-SSL/ports.conf /etc/apache2/ports.conf
        COPY ./Config-SSL/apache2.conf /etc/apache2/apache2.conf
        
        RUN apt-get update && apt-get install -y \
        libldap2-dev \
        git \
        zip \
        unzip \
        && docker-php-ext-configure ldap --with-libdir=lib/$(gcc -dumpmachine)/ \
        && docker-php-ext-install ldap \
        && a2enmod ssl && a2ensite default-ssl && a2enmod rewrite && a2enmod socache_shmcb \
        && service apache2 restart
    entrypoint:
      - /bin/bash
      - -c
      - |
        rm -f /etc/apache2/sites-available/000-default.conf
        apachectl -D FOREGROUND
    container_name: ldap_web_portal_container
    environment:
      - LDAP_ADMIN_PASSWORD=$LDAP_ADMIN_PASSWORD
      - DOMAINENIV1=$DOMAINENIV1
      - DOMAINENIV2=$DOMAINENIV2
    volumes:
      - ./web-portal:/var/www/html
      - ./Certificats/localhost.crt:/etc/ssl/certs/localhost.crt
      - ./Certificats/localhost.key:/etc/ssl/private/localhost.key
      - ./Config-SSL/default-ssl.conf:/etc/apache2/sites-available/default-ssl.conf
      - ./Config-SSL/ports.conf:/etc/apache2/ports.conf
      - ./Config-SSL/apache2.conf:/etc/apache2/apache2.conf
    ports:
      - "8443:443"

  # Service Keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: [ "start-dev" ]
    container_name: keycloak_container
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - DB_VENDOR=H2
    ports:
      - "8080:8080"
    volumes:
      - ./data/keycloak_data:/opt/keycloak/data
    depends_on:
      - ldap-server


  # Service Nextcloud

  nextcloud_db:
    image: mariadb
    container_name: nextcloud_db
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    #volumes:
    #  - ./data/nextcloud_db_data:/var/lib/mysql
    volumes:
      - nextcloud_db_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=$NEXTCLOUD_MYSQL_ROOT_PASSWORD  # Mot de passe de l'utilisateur root de mariadb
      - MYSQL_DATABASE=$NEXTCLOUD_MYSQL_DATABASE  # Nom de la base de données à créer à l'initialisation du conteneur
      - MYSQL_USER=$NEXTCLOUD_MYSQL_USER  # Nom de l'utilisateur de la base de données créée
      - MYSQL_PASSWORD=$NEXTCLOUD_MYSQL_PASSWORD  # Mot de passe de l'utilisateur créé

  nextcloud_app:
    image: nextcloud
    container_name: nextcloud_app
    restart: always
    ports:
      - 9080:80
    links:
      - nextcloud_db

    #volumes:
    #  - ./data/nextcloud_data:/var/www/html
    volumes:
      - nextcloud_data:/var/www/html #Utilisation d'un volume pour la persistance des données mais pas un dossier monté
    environment:
      - MYSQL_HOST=nextcloud_db  # Nom du conteneur de la base de données
      - MYSQL_DATABASE=$NEXTCLOUD_MYSQL_DATABASE  # Nom de la base de données
      - MYSQL_USER=$NEXTCLOUD_MYSQL_USER  # Nom de l'utilisateur de la base de données
      - MYSQL_PASSWORD=$NEXTCLOUD_MYSQL_PASSWORD  # Mot de passe de l'utilisateur de la base de données


  # Service Discourse
  # https://github.com/bitnami/containers/blob/main/bitnami/discourse/docker-compose.yml
  #

  postgresql:
    image: docker.io/bitnami/postgresql:16
    volumes:
      - postgresql_data:/bitnami/postgresql
    environment:
      - ALLOW_EMPTY_PASSWORD=yes  # Pour le développement uniquement
      - POSTGRESQL_USERNAME=bn_discourse
      - POSTGRESQL_DATABASE=bitnami_discourse

  redis:
    image: docker.io/bitnami/redis:7.0
    environment:
      - ALLOW_EMPTY_PASSWORD=yes  # Pour le développement uniquement
    volumes:
      - redis_data:/data

  discourse:
    image: docker.io/bitnami/discourse:3
    ports:
      - '8081:3000'  # Changez le port si nécessaire pour éviter les conflits
    volumes:
      - discourse_data:/bitnami/discourse
    depends_on:
      - postgresql
      - redis
    environment:
      - ALLOW_EMPTY_PASSWORD=yes  # Pour le développement uniquement
      - DISCOURSE_HOST=www.example.com  # Remplacez par votre domaine
      - DISCOURSE_DATABASE_HOST=postgresql
      - DISCOURSE_DATABASE_PORT_NUMBER=5432
      - DISCOURSE_DATABASE_USER=bn_discourse
      - DISCOURSE_DATABASE_NAME=bitnami_discourse
      - DISCOURSE_REDIS_HOST=redis
      - DISCOURSE_REDIS_PORT_NUMBER=6379

  sidekiq:
    image: docker.io/bitnami/discourse:3
    depends_on:
      - discourse
    volumes:
      - sidekiq_data:/bitnami/discourse
    command: /opt/bitnami/scripts/discourse-sidekiq/run.sh
    environment:
      - ALLOW_EMPTY_PASSWORD=yes  # Pour le développement uniquement
      - DISCOURSE_HOST=www.example.com  # Remplacez par votre domaine
      - DISCOURSE_DATABASE_HOST=postgresql
      - DISCOURSE_DATABASE_PORT_NUMBER=5432
      - DISCOURSE_DATABASE_USER=bn_discourse
      - DISCOURSE_DATABASE_NAME=bitnami_discourse
      - DISCOURSE_REDIS_HOST=redis
      - DISCOURSE_REDIS_PORT_NUMBER=6379

volumes:
  nextcloud_db_data:
  nextcloud_data:
  postgresql_data:
  redis_data:
  discourse_data:
  sidekiq_data:



