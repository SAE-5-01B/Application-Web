version: '3'

services:

  # Service LDAP

  ldap-server:
    image: osixia/openldap
    container_name: ldap_server_container
    environment:
      LDAP_ORGANISATION: "CATS"
      LDAP_DOMAIN: "$DOMAINENIV2.$DOMAINENIV1"
      LDAP_ADMIN_PASSWORD: "$LDAP_ADMIN_PASSWORD"
      LDAP_READONLY_USER: true
      LDAP_READONLY_USER_USERNAME: "sysUser"
      LDAP_READONLY_USER_PASSWORD: "readOnlyPassword"
    ports:
      - "389:389"
    volumes:
      - ./data/ldap_data:/var/lib/ldap
      - ./data/ldap_config:/etc/ldap/slapd.d

  # Service phpldapadmin

  phpldapadmin:
    image: osixia/phpldapadmin
    container_name: ldap_phpldapadmin_container
    environment:
      PHPLDAPADMIN_LDAP_HOSTS: ldap-server
      PHPLDAPADMIN_HTTPS: 0
    ports:
      - "6080:80"
    depends_on:
      - ldap-server

  # Service Web-Portal

  web-portal:
    build:
      context: .
      dockerfile_inline: |
        FROM php:apache
        COPY ./Certificats/localhost.crt /etc/ssl/certs/localhost.crt
        COPY ./Certificats/localhost.key /etc/ssl/private/localhost.key
        
        COPY ./Config-SSL/default-ssl.conf /etc/apache2/sites-available/default-ssl.conf
        COPY ./Config-SSL/ports.conf /etc/apache2/ports.conf
        COPY ./Config-SSL/apache2.conf /etc/apache2/apache2.conf
        
        RUN apt-get update && apt-get install -y \
        libldap2-dev \
        git \
        zip \
        unzip \
        && docker-php-ext-configure ldap --with-libdir=lib/$(gcc -dumpmachine)/ \
        && docker-php-ext-install ldap \
        && a2enmod ssl && a2ensite default-ssl && a2enmod rewrite && a2enmod socache_shmcb \
        && service apache2 restart
    entrypoint:
      - /bin/bash
      - -c
      - |
        rm -f /etc/apache2/sites-available/000-default.conf
        apachectl -D FOREGROUND
    container_name: ldap_web_portal_container
    environment:
      - LDAP_ADMIN_PASSWORD=$LDAP_ADMIN_PASSWORD
      - DOMAINENIV1=$DOMAINENIV1
      - DOMAINENIV2=$DOMAINENIV2
    volumes:
      - ./web-portal:/var/www/html
      - ./Certificats/localhost.crt:/etc/ssl/certs/localhost.crt
      - ./Certificats/localhost.key:/etc/ssl/private/localhost.key
      - ./Config-SSL/default-ssl.conf:/etc/apache2/sites-available/default-ssl.conf
      - ./Config-SSL/ports.conf:/etc/apache2/ports.conf
      - ./Config-SSL/apache2.conf:/etc/apache2/apache2.conf
    ports:
      - "8443:443"

  # Service Keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command: [ "start-dev" ]
    container_name: keycloak_container
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - DB_VENDOR=H2
    ports:
      - "8080:8080"
    volumes:
      - ./data/keycloak_data:/opt/keycloak/data
    depends_on:
      - ldap-server


  # Service Nextcloud

  nextcloud_db:
    image: mariadb
    container_name: nextcloud_db
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    #volumes:
    #  - ./data/nextcloud_db_data:/var/lib/mysql
    volumes:
      - nextcloud_db_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=$NEXTCLOUD_MYSQL_ROOT_PASSWORD  # Mot de passe de l'utilisateur root de mariadb
      - MYSQL_DATABASE=$NEXTCLOUD_MYSQL_DATABASE  # Nom de la base de données à créer à l'initialisation du conteneur
      - MYSQL_USER=$NEXTCLOUD_MYSQL_USER  # Nom de l'utilisateur de la base de données créée
      - MYSQL_PASSWORD=$NEXTCLOUD_MYSQL_PASSWORD  # Mot de passe de l'utilisateur créé

  nextcloud_app:
    image: nextcloud
    container_name: nextcloud_app
    restart: always
    ports:
      - 9080:80
    links:
      - nextcloud_db

    #volumes:
    #  - ./data/nextcloud_data:/var/www/html
    volumes:
      - nextcloud_data:/var/www/html #Utilisation d'un volume pour la persistance des données mais pas un dossier monté
    environment:
      - MYSQL_HOST=nextcloud_db  # Nom du conteneur de la base de données
      - MYSQL_DATABASE=$NEXTCLOUD_MYSQL_DATABASE  # Nom de la base de données
      - MYSQL_USER=$NEXTCLOUD_MYSQL_USER  # Nom de l'utilisateur de la base de données
      - MYSQL_PASSWORD=$NEXTCLOUD_MYSQL_PASSWORD  # Mot de passe de l'utilisateur de la base de données


  # Service RocketChat
  #https://github.com/RocketChat/Rocket.Chat/issues/15891
  #https://docs.rocket.chat/setup-and-configure/advanced-workspace-management/authentication/open-id-connect/keycloak
  #https://forums.rocket.chat/t/help-setting-up-oauth-with-keycloack/10202/12
  rocketchat:
    image: registry.rocket.chat/rocketchat/rocket.chat:${RELEASE:-latest}
    restart: always
    labels:
      traefik.enable: "true"
      traefik.http.routers.rocketchat.rule: Host(`${DOMAIN:-}`)
      traefik.http.routers.rocketchat.tls: "true"
      traefik.http.routers.rocketchat.entrypoints: https
      traefik.http.routers.rocketchat.tls.certresolver: le
    environment:
      MONGO_URL: "${MONGO_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/${MONGODB_DATABASE:-rocketchat}?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      MONGO_OPLOG_URL: "${MONGO_OPLOG_URL:-mongodb://${MONGODB_ADVERTISED_HOSTNAME:-mongodb}:${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}/local?replicaSet=${MONGODB_REPLICA_SET_NAME:-rs0}}"
      ROOT_URL: ${ROOT_URL:-http://localhost:${HOST_PORT:-3000}}
      PORT: ${PORT:-3000}
      DEPLOY_METHOD: docker
      DEPLOY_PLATFORM: ${DEPLOY_PLATFORM:-}
      REG_TOKEN: ${REG_TOKEN:-}
      # Keycloak OAuth settings
      Accounts_OAuth_Custom_keycloak: "true"
      Accounts_OAuth_Custom_keycloak_id: "Rocket-chat"
      Accounts_OAuth_Custom_keycloak_secret: "eDwEJrBEjXNiaqmfQPF9Hsbq2xMgMjc3"
      Accounts_OAuth_Custom_keycloak_url: "http://localhost:8080"
      Accounts_OAuth_Custom_keycloak_token_path: "/realms/CATS/protocol/openid-connect/token"
      Accounts_OAuth_Custom_keycloak_identity_path: "/realms/CATS/protocol/openid-connect/userinfo"
      Accounts_OAuth_Custom_keycloak_authorize_path: "/realms/CATS/protocol/openid-connect/auth"
      Accounts_OAuth_Custom_keycloak_scope: "openid"
      Accounts_OAuth_Custom_keycloak_access_token_param: "access_token"
      Accounts_OAuth_Custom_keycloak_button_label_text: "Connect avec Keycloak miaou miaou"
      Accounts_OAuth_Custom_keycloak_button_label_color: "#07F4F0"
      Accounts_OAuth_Custom_keycloak_login_style: "redirect"
      Accounts_OAuth_Custom_keycloak_button_color: "#13679A"
      Accounts_OAuth_Custom_keycloak_token_sent_via: "payload"
      Accounts_OAuth_Custom_keycloak_identity_token_sent_via: "header"
      Accounts_OAuth_Custom_keycloak_key_field: "username"
      Accounts_OAuth_Custom_keycloak_username_field: "preferred_username"
      Accounts_OAuth_Custom_keycloak_name_field: "name"
      Accounts_OAuth_Custom_keycloak_email_field: "email"
      Accounts_OAuth_Custom_keycloak_roles_claim: ""
      Accounts_OAuth_Custom_keycloak_groups_claim: ""
      Accounts_OAuth_Custom_keycloak_groups_channel_map: ""
      Accounts_OAuth_Custom_keycloak_channels_admin: "rocket.cat"
      Accounts_OAuth_Custom_keycloak_merge_users: "true"
      Accounts_OAuth_Custom_keycloak_map_channels: ""
      Accounts_OAuth_Custom_keycloak_merge_roles: "false"
      Accounts_OAuth_Custom_keycloak_show_button: "true"
      Accounts_OAuth_Custom_keycloak_avatar_field: ""
    depends_on:
      - mongodb
    expose:
      - ${PORT:-3000}
    ports:
      - "${BIND_IP:-0.0.0.0}:${HOST_PORT:-3000}:${PORT:-3000}"

  mongodb:
    image: docker.io/bitnami/mongodb:${MONGODB_VERSION:-5.0}
    restart: always
    volumes:
      - mongodb_data:/bitnami/mongodb
    environment:
      MONGODB_REPLICA_SET_MODE: primary
      MONGODB_REPLICA_SET_NAME: ${MONGODB_REPLICA_SET_NAME:-rs0}
      MONGODB_PORT_NUMBER: ${MONGODB_PORT_NUMBER:-27017}
      MONGODB_INITIAL_PRIMARY_HOST: ${MONGODB_INITIAL_PRIMARY_HOST:-mongodb}
      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: ${MONGODB_INITIAL_PRIMARY_PORT_NUMBER:-27017}
      MONGODB_ADVERTISED_HOSTNAME: ${MONGODB_ADVERTISED_HOSTNAME:-mongodb}
      MONGODB_ENABLE_JOURNAL: ${MONGODB_ENABLE_JOURNAL:-true}
      ALLOW_EMPTY_PASSWORD: ${ALLOW_EMPTY_PASSWORD:-yes}

volumes:
  mongodb_data: { driver: local }
  nextcloud_db_data:
  nextcloud_data:





